{
  "swagger": "2.0",
  "info": {
    "title": "Card Management - DRAFT VERSION",
    "description": "Allows to get information of Tokenized Cards of a given user stored by the OB, to create (save) or delete a Tokenized Card, and to check whether a given user is blacklisted to make payments with his/her Tokenized Cards.\n\n# Relevant Definitions and concepts\n\n- **Tokenized Card**: Credit or debit Card stored in OB Card storage solution. The information saved is a token valid for doing payments with the card together with metadata needed to identify the card.\n\n# API Functionality\n\n This API allows to retrieve the Tokenized Cards stored by the OB associated to a given user, as well as to save a new Tokenized Card for a User, to delete a existing Tokenized Card, and finally to check blacklisting status of a user for the use of his/her Tokenized Cards.\n\n# Resources and Operations overview\n\n There are four resources in the API:\n- One to retrieve saved tokenized cards, which provides the list of stored cards, providing for each the token together with metadata to describe the card as well as some other info such as the which is the default one.\n- Another to request the storage of a new Tokenized card for the user.\n- A third one to request the deletion of a Tokenized Card.\n- Finally a resource to check blacklisting status of a given user for making payments with his/her Tokenized Cards.\n\n Resource in the API can be used in 3-legged mode. When accessed in 3 legged mode, the URI param {user_id} should be substituted by the special keyword ‘me’.\n\n# Further Info and Support\nFind answers to Frequently Asked Questions in **https://qna.baikalplatform.com/c/api-faq**.\n\n Topics with the **tag 'tokenized card'** are specific for Card Management API.",
    "version": "2.1.0",
    "contact": {
      "name": "4th Platform Team",
      "email": "4pf@tid.es"
    }
  },
  "x-fp-apiPrefix": "/card-management",
  "x-fp-health": "http://card-management:8080/healthz",
  "schemes": [
    "https"
  ],
  "host": "checkout-service-cert1-es.mytelco.io",
  "basePath": "/card-management/v2",
  "tags": [
    {
      "name": "cards",
      "description": "Operations available to manage Tokenized Cards"
    },
    {
      "name": "blacklists",
      "description": "Operations available to check blacklist status"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/users/{user_id}/cards": {
      "get": {
        "tags": [
          "cards"
        ],
        "description": "Get Tokenized Cards of the user.",
        "summary": "Get Tokenized Cards of the user.",
        "operationId": "getTokenizedCards",
        "x-fp-pi-scopes": [
          "card-management-user-read"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/UserId"
          },
          {
            "in": "header",
            "type": "string",
            "name": "x-4p-channel-id",
            "description": "Identifier of the channel. To be used when it needs to be differentiated from API Client"
          },
          {
            "$ref": "https://docs.baikalplatform.com/common/v2.3/common.json#/parameters/x-correlator"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "x-correlator": {
                "type": "string",
                "description": "Correlation id for the different services"
              }
            },
            "schema": {
              "$ref": "#/definitions/ListOfTokenizedCards"
            },
            "examples": {
              "application/json": [
                {
                  "id": "9e844a09-fe8b-4b39-8b09-74161c2259a8",
                  "alias": "My VISA Card",
                  "masked_number": "244533******1234",
                  "brand": "VISA",
                  "type": "Credit",
                  "expiration_date": "09/22",
                  "token": "APINDFGESCEDDPDAPOFAJSDOFJAPOFAAEFAIADPJFA",
                  "token_issuer": "DCP"
                }
              ]
            }
          },
          "400": {
            "description": "Problem with the client request",
            "headers": {
              "x-correlator": {
                "type": "string",
                "description": "Correlation id for the different services"
              }
            },
            "schema": {
              "$ref": "https://docs.baikalplatform.com/errors/v2.0/errors.json#/definitions/InvalidArgument"
            },
            "examples": {
              "application/json": {
                "code": "INVALID_ARGUMENT",
                "message": "Client specified an invalid argument, request body or query param"
              }
            }
          },
          "403": {
            "description": "Client does not have sufficient permission",
            "headers": {
              "x-correlator": {
                "type": "string",
                "description": "Correlation id for the different services"
              }
            },
            "schema": {
              "$ref": "https://docs.baikalplatform.com/errors/v2.0/errors.json#/definitions/PermissionDenied"
            },
            "examples": {
              "application/json": {
                "code": "PERMISSION_DENIED",
                "message": "Authenticated user has no permission to access the requested resource"
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "headers": {
              "x-correlator": {
                "type": "string",
                "description": "Correlation id for the different services"
              }
            },
            "schema": {
              "$ref": "https://docs.baikalplatform.com/errors/v2.0/errors.json#/definitions/NotFound"
            },
            "examples": {
              "application/json": {
                "code": "NOT_FOUND",
                "message": "A specified resource is not found"
              }
            }
          },
          "500": {
            "description": "Server error",
            "headers": {
              "x-correlator": {
                "type": "string",
                "description": "Correlation id for the different services"
              }
            },
            "schema": {
              "$ref": "https://docs.baikalplatform.com/errors/v2.0/errors.json#/definitions/Internal"
            },
            "examples": {
              "application/json": {
                "code": "INTERNAL",
                "message": "Server error"
              }
            }
          },
          "504": {
            "description": "Request timeout exceeded. If it happens repeatedly, consider reducing the request complexity",
            "headers": {
              "x-correlator": {
                "type": "string",
                "description": "Correlation id for the different services"
              }
            },
            "schema": {
              "$ref": "https://docs.baikalplatform.com/errors/v2.0/errors.json#/definitions/Timeout"
            },
            "examples": {
              "application/json": {
                "code": "TIMEOUT",
                "message": "Request timeout exceeded. Try it later"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "cards"
        ],
        "description": "Create a new Tokenized Card for the user.",
        "summary": "Create a new Tokenized Card for the user.",
        "operationId": "createTokenizedCard",
        "x-fp-pi-scopes": [
          "card-management-user-write"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/UserId"
          },
          {
            "in": "header",
            "type": "string",
            "name": "x-4p-channel-id",
            "description": "Identifier of the channel. To be used when it needs to be differentiated from API Client"
          },
          {
            "$ref": "https://docs.baikalplatform.com/common/v2.3/common.json#/parameters/x-correlator"
          },
          {
            "name": "CreateTokenizedCard",
            "in": "body",
            "description": "Body to create a tokenized card",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateTokenizedCard"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "x-correlator": {
                "type": "string",
                "description": "Correlation id for the different services"
              }
            },
            "schema": {
              "$ref": "#/definitions/TokenizedCard"
            },
            "examples": {
              "application/json": {
                "id": "9e844a09-fe8b-4b39-8b09-74161c2259a8",
                "alias": "My VISA Card",
                "masked_number": "244533******1234",
                "brand": "VISA",
                "type": "Credit",
                "expiration_date": "09/22",
                "token": "APINDFGESCEDDPDAPOFAJSDOFJAPOFAAEFAIADPJFA",
                "token_issuer": "DCP"
              }
            }
          },
          "400": {
            "description": "Problem with the client request",
            "headers": {
              "x-correlator": {
                "type": "string",
                "description": "Correlation id for the different services"
              }
            },
            "schema": {
              "$ref": "https://docs.baikalplatform.com/errors/v2.0/errors.json#/definitions/InvalidArgument"
            },
            "examples": {
              "application/json": {
                "code": "INVALID_ARGUMENT",
                "message": "Client specified an invalid argument, request body or query param"
              }
            }
          },
          "403": {
            "description": "Client does not have sufficient permission",
            "headers": {
              "x-correlator": {
                "type": "string",
                "description": "Correlation id for the different services"
              }
            },
            "schema": {
              "$ref": "https://docs.baikalplatform.com/errors/v2.0/errors.json#/definitions/PermissionDenied"
            },
            "examples": {
              "application/json": {
                "code": "PERMISSION_DENIED",
                "message": "Authenticated user has no permission to access the requested resource"
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "headers": {
              "x-correlator": {
                "type": "string",
                "description": "Correlation id for the different services"
              }
            },
            "schema": {
              "$ref": "https://docs.baikalplatform.com/errors/v2.0/errors.json#/definitions/NotFound"
            },
            "examples": {
              "application/json": {
                "code": "NOT_FOUND",
                "message": "A specified resource is not found"
              }
            }
          },
          "409": {
            "description": "The resource already exists",
            "headers": {
              "x-correlator": {
                "type": "string",
                "description": "Correlation id for the different services"
              }
            },
            "schema": {
              "$ref": "https://docs.baikalplatform.com/errors/v2.0/errors.json#/definitions/AlreadyExists"
            },
            "examples": {
              "application/json": {
                "code": "ALREADY_EXISTS",
                "message": "A specified resource already exists"
              }
            }
          },
          "500": {
            "description": "Server error",
            "headers": {
              "x-correlator": {
                "type": "string",
                "description": "Correlation id for the different services"
              }
            },
            "schema": {
              "$ref": "https://docs.baikalplatform.com/errors/v2.0/errors.json#/definitions/Internal"
            },
            "examples": {
              "application/json": {
                "code": "INTERNAL",
                "message": "Server error"
              }
            }
          },
          "504": {
            "description": "Request timeout exceeded. If it happens repeatedly, consider reducing the request complexity",
            "headers": {
              "x-correlator": {
                "type": "string",
                "description": "Correlation id for the different services"
              }
            },
            "schema": {
              "$ref": "https://docs.baikalplatform.com/errors/v2.0/errors.json#/definitions/Timeout"
            },
            "examples": {
              "application/json": {
                "code": "TIMEOUT",
                "message": "Request timeout exceeded. Try it later"
              }
            }
          }
        }
      }
    },
    "/users/{user_id}/cards/{id}": {
      "delete": {
        "tags": [
          "cards"
        ],
        "description": "Delete a Tokenized Card of the user. As implicit process of the invocation of this API endpoint, Server (i.e. OB Backend) API Logic shall be responsible of Tokenized Card deletion in Payment Gateway System (e.g. DCP).",
        "summary": "Delete a Tokenized Card of the user.",
        "operationId": "deleteTokenizedCards",
        "x-fp-pi-scopes": [
          "card-management-user-delete"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/UserId"
          },
          {
            "$ref": "#/parameters/Id"
          },
          {
            "in": "header",
            "type": "string",
            "name": "x-4p-channel-id",
            "description": "Identifier of the channel. To be used when it needs to be differentiated from API Client"
          },
          {
            "$ref": "https://docs.baikalplatform.com/common/v2.3/common.json#/parameters/x-correlator"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "headers": {
              "x-correlator": {
                "type": "string",
                "description": "Correlation id for the different services"
              }
            }
          },
          "400": {
            "description": "Problem with the client request",
            "headers": {
              "x-correlator": {
                "type": "string",
                "description": "Correlation id for the different services"
              }
            },
            "schema": {
              "$ref": "https://docs.baikalplatform.com/errors/v2.0/errors.json#/definitions/InvalidArgument"
            },
            "examples": {
              "application/json": {
                "code": "INVALID_ARGUMENT",
                "message": "Client specified an invalid argument, request body or query param"
              }
            }
          },
          "403": {
            "description": "Client does not have sufficient permission",
            "headers": {
              "x-correlator": {
                "type": "string",
                "description": "Correlation id for the different services"
              }
            },
            "schema": {
              "$ref": "https://docs.baikalplatform.com/errors/v2.0/errors.json#/definitions/PermissionDenied"
            },
            "examples": {
              "application/json": {
                "code": "PERMISSION_DENIED",
                "message": "Authenticated user has no permission to access the requested resource"
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "headers": {
              "x-correlator": {
                "type": "string",
                "description": "Correlation id for the different services"
              }
            },
            "schema": {
              "$ref": "https://docs.baikalplatform.com/errors/v2.0/errors.json#/definitions/NotFound"
            },
            "examples": {
              "application/json": {
                "code": "NOT_FOUND",
                "message": "A specified resource is not found"
              }
            }
          },
          "500": {
            "description": "Server error",
            "headers": {
              "x-correlator": {
                "type": "string",
                "description": "Correlation id for the different services"
              }
            },
            "schema": {
              "$ref": "https://docs.baikalplatform.com/errors/v2.0/errors.json#/definitions/Internal"
            },
            "examples": {
              "application/json": {
                "code": "INTERNAL",
                "message": "Server error"
              }
            }
          },
          "504": {
            "description": "Request timeout exceeded. If it happens repeatedly, consider reducing the request complexity",
            "headers": {
              "x-correlator": {
                "type": "string",
                "description": "Correlation id for the different services"
              }
            },
            "schema": {
              "$ref": "https://docs.baikalplatform.com/errors/v2.0/errors.json#/definitions/Timeout"
            },
            "examples": {
              "application/json": {
                "code": "TIMEOUT",
                "message": "Request timeout exceeded. Try it later"
              }
            }
          }
        }
      }
    },
    "/users/{user_id}/is-blacklisted": {
      "get": {
        "tags": [
          "blacklists"
        ],
        "description": "Get Blacklist information of an user with regards to the use of Tokenized Cards.",
        "summary": "Get Blacklist information of an user with regards to the use of Tokenized Cards.",
        "operationId": "getBlacklistStatus",
        "x-fp-pi-scopes": [
          "card-management-blacklist-read"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/UserId"
          },
          {
            "in": "header",
            "type": "string",
            "name": "x-4p-channel-id",
            "description": "Identifier of the channel. To be used when it needs to be differentiated from API Client"
          },
          {
            "$ref": "https://docs.baikalplatform.com/common/v2.3/common.json#/parameters/x-correlator"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "x-correlator": {
                "type": "string",
                "description": "Correlation id for the different services"
              }
            },
            "schema": {
              "$ref": "#/definitions/Blacklist"
            },
            "examples": {
              "application/json": {
                "is_blacklisted": true
              }
            }
          },
          "400": {
            "description": "Problem with the client request",
            "headers": {
              "x-correlator": {
                "type": "string",
                "description": "Correlation id for the different services"
              }
            },
            "schema": {
              "$ref": "https://docs.baikalplatform.com/errors/v2.0/errors.json#/definitions/InvalidArgument"
            },
            "examples": {
              "application/json": {
                "code": "INVALID_ARGUMENT",
                "message": "Client specified an invalid argument, request body or query param"
              }
            }
          },
          "403": {
            "description": "Client does not have sufficient permission",
            "headers": {
              "x-correlator": {
                "type": "string",
                "description": "Correlation id for the different services"
              }
            },
            "schema": {
              "$ref": "https://docs.baikalplatform.com/errors/v2.0/errors.json#/definitions/PermissionDenied"
            },
            "examples": {
              "application/json": {
                "code": "PERMISSION_DENIED",
                "message": "Authenticated user has no permission to access the requested resource"
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "headers": {
              "x-correlator": {
                "type": "string",
                "description": "Correlation id for the different services"
              }
            },
            "schema": {
              "$ref": "https://docs.baikalplatform.com/errors/v2.0/errors.json#/definitions/NotFound"
            },
            "examples": {
              "application/json": {
                "code": "NOT_FOUND",
                "message": "A specified resource is not found"
              }
            }
          },
          "500": {
            "description": "Server error",
            "headers": {
              "x-correlator": {
                "type": "string",
                "description": "Correlation id for the different services"
              }
            },
            "schema": {
              "$ref": "https://docs.baikalplatform.com/errors/v2.0/errors.json#/definitions/Internal"
            },
            "examples": {
              "application/json": {
                "code": "INTERNAL",
                "message": "Server error"
              }
            }
          },
          "504": {
            "description": "Request timeout exceeded. If it happens repeatedly, consider reducing the request complexity",
            "headers": {
              "x-correlator": {
                "type": "string",
                "description": "Correlation id for the different services"
              }
            },
            "schema": {
              "$ref": "https://docs.baikalplatform.com/errors/v2.0/errors.json#/definitions/Timeout"
            },
            "examples": {
              "application/json": {
                "code": "TIMEOUT",
                "message": "Request timeout exceeded. Try it later"
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ListOfTokenizedCards": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/TokenizedCard"
      }
    },
    "TokenizedCard": {
      "type": "object",
      "description": "Information of a Tokenized Card",
      "required": [
        "id",
        "masked_number",
        "brand",
        "type",
        "expiration_date",
        "token",
        "token_issuer"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the card for this user"
        },
        "alias": {
          "type": "string",
          "description": "Alias given to this Tokenized Card, if any. User Friendly Field"
        },
        "masked_number": {
          "type": "string",
          "description": "Masked Personal Account Number, i.e.: Card number."
        },
        "brand": {
          "type": "string",
          "description": "Card Brand. A set of supported values is defined, bearing in mind this list can be extended in the future. API clients MUST be ready to support new values when included. Also, a given OB may not support every value",
          "enum": [
            "VISA",
            "MASTERCARD",
            "AMERICAN EXPRESS",
            "ELO",
            "HIPERCARD"
          ]
        },
        "type": {
          "type": "string",
          "description": "Card Type",
          "enum": [
            "Credit",
            "Debit",
            "Unspecified"
          ]
        },
        "category": {
          "type": "string",
          "description": "Category of the card, e.g.: Platinum, Business."
        },
        "holder_name": {
          "type": "string",
          "description": "Name of the card holder"
        },
        "expiration_date": {
          "type": "string",
          "pattern": "^(0[1-9]|1[0-2])/[0-9]{2}$",
          "description": "Card expiration date, in format MM/YY"
        },
        "token": {
          "type": "string",
          "description": "The token itself"
        },
        "token_issuer": {
          "type": "string",
          "description": "Whoever issued the token.\nNOTE: API clients MUST be ready to support new values when defined.",
          "enum": [
            "DCP",
            "TRUUST"
          ]
        }
      }
    },
    "CreateTokenizedCard": {
      "type": "object",
      "description": "Object to create a Tokenized Card",
      "required": [
        "masked_number",
        "brand",
        "type",
        "expiration_date",
        "token",
        "token_issuer"
      ],
      "properties": {
        "alias": {
          "type": "string",
          "description": "Alias given to this Tokenized Card. If not included server may generate an alias anyway. User Friendly Field"
        },
        "masked_number": {
          "type": "string",
          "description": "Masked Personal Account Number, i.e.: Card number."
        },
        "brand": {
          "type": "string",
          "description": "Card Brand. A set of supported values is defined, bearing in mind this list can be extended in the future. API clients MUST be ready to support new values when included. Also, a given OB may not support every value.",
          "enum": [
            "VISA",
            "MASTERCARD",
            "AMERICAN EXPRESS",
            "ELO",
            "HIPERCARD"
          ]
        },
        "type": {
          "type": "string",
          "description": "Card Type",
          "enum": [
            "Credit",
            "Debit",
            "Unspecified"
          ]
        },
        "category": {
          "type": "string",
          "description": "Category of the card, e.g.: Platinum, Business."
        },
        "holder_name": {
          "type": "string",
          "description": "Name of the card holder"
        },
        "expiration_date": {
          "type": "string",
          "pattern": "^(0[1-9]|1[0-2])/[0-9]{2}$",
          "description": "Card expiration date, in format MM/YY"
        },
        "token": {
          "type": "string",
          "description": "The token itself"
        },
        "token_issuer": {
          "type": "string",
          "description": "Whoever issued the token.\nNOTE: API clients MUST be ready to support new values when defined.",
          "enum": [
            "DCP",
            "TRUUST"
          ]
        }
      },
      "example": {
        "alias": "My VISA Card",
        "masked_number": "244533******1234",
        "brand": "VISA",
        "type": "Credit",
        "expiration_date": "09/22",
        "token": "APINDFGESCEDDPDAPOFAJSDOFJAPOFAAEFAIADPJFA",
        "token_issuer": "DCP"
      }
    },
    "Blacklist": {
      "type": "object",
      "description": "Indicates if user is in blacklist to use the cards to perform payments",
      "required": [
        "is_blacklisted"
      ],
      "properties": {
        "is_blacklisted": {
          "type": "boolean",
          "description": "Blacklisting status of a given user with regards the use of Tokenized Cards for Payments."
        }
      }
    }
  },
  "parameters": {
    "UserId": {
      "name": "user_id",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "id of the user for which the methods apply.\nThis value should be changed to the special keyword 'me' to simplify calls when access using OAuth2 with three-legged authentication.",
      "x-fp-identifier": "user_id"
    },
    "Id": {
      "name": "id",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "Tokenized Card Identifier. Unique at least for a given user"
    }
  }
}